type Addresses = record {
  solana : text;
  icp_account : text;
  ethereum : text;
  icp_principal : text;
  bitcoin : text;
};
type GetUtxosResponse = record {
  next_page : opt blob;
  tip_height : nat32;
  tip_block_hash : blob;
  utxos : vec Utxo;
};
type NetworkChoice = variant { Mainnet; Local };
type Outpoint = record { txid : blob; vout : nat32 };
type SendRequest = record {
  destination_address : text;
  amount_in_satoshi : nat64;
};
type Utxo = record { height : nat32; value : nat64; outpoint : Outpoint };
service : (NetworkChoice) -> {
  // Returns a legacy P2PKH (Pay-to-PubKey-Hash) address for this smart contract.
  // 
  // This address uses an ECDSA public key and encodes it in the legacy Base58 format.
  // It is supported by all bitcoin wallets and full nodes.
  bitcoin_address : () -> (text);
  // Returns the balance of the caller's bitcoin address.
  bitcoin_balance : () -> (nat64);
  // Returns the 100 fee percentiles measured in millisatoshi/byte.
  // Percentiles are computed from the last 10,000 transactions (if available).
  bitcoin_current_fee_percentiles : () -> (vec nat64);
  // Sends the given amount of bitcoin from this smart contract's P2PKH address to the given address.
  // Returns the transaction ID.
  bitcoin_send : (SendRequest) -> (text);
  // Returns the UTXOs of the given Bitcoin address.
  bitcoin_utxos : (text) -> (GetUtxosResponse);
  ethereum_address : () -> (text);
  ethereum_balance : () -> (text);
  ethereum_send : (text, nat) -> (text);
  solana_address : () -> (text);
  solana_balance : () -> (nat);
  solana_send : (text, nat) -> (text);
  wallet_addresses : () -> (Addresses);
}
