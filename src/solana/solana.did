type CommitmentLevel = variant { finalized; confirmed; processed };
type CompiledInstruction = record {
  data : text;
  accounts : blob;
  programIdIndex : nat8;
  stackHeight : opt nat32;
};
type Ed25519KeyName = variant {
  MainnetTestKey1;
  LocalDevelopment;
  MainnetProdKey1;
};
type EncodedConfirmedTransactionWithStatusMeta = record {
  transaction : EncodedTransactionWithStatusMeta;
  slot : nat64;
  blockTime : opt int64;
};
type EncodedTransaction = variant {
  legacyBinary : text;
  binary : record { text; TransactionBinaryEncoding };
};
type EncodedTransactionWithStatusMeta = record {
  meta : opt TransactionStatusMeta;
  transaction : EncodedTransaction;
  version : opt TransactionVersion;
};
type HttpHeader = record { value : text; name : text };
type InitArg = record {
  solana_commitment_level : opt CommitmentLevel;
  ed25519_key_name : opt Ed25519KeyName;
  solana_network : opt SolanaNetwork;
  sol_rpc_canister_id : opt principal;
};
type InnerInstructions = record {
  instructions : vec Instruction;
  index : nat8;
};
type Instruction = variant { compiled : CompiledInstruction };
type InstructionError = variant {
  ModifiedProgramId;
  CallDepth;
  Immutable;
  GenericError;
  ExecutableAccountNotRentExempt;
  IncorrectAuthority;
  PrivilegeEscalation;
  ReentrancyNotAllowed;
  InvalidInstructionData;
  RentEpochModified;
  IllegalOwner;
  ComputationalBudgetExceeded;
  ExecutableDataModified;
  ExecutableLamportChange;
  UnbalancedInstruction;
  ProgramEnvironmentSetupFailure;
  IncorrectProgramId;
  UnsupportedSysvar;
  UnsupportedProgramId;
  AccountDataTooSmall;
  NotEnoughAccountKeys;
  AccountBorrowFailed;
  InvalidRealloc;
  AccountNotExecutable;
  AccountNotRentExempt;
  Custom : nat32;
  AccountDataSizeChanged;
  MaxAccountsDataAllocationsExceeded;
  ExternalAccountLamportSpend;
  ExternalAccountDataModified;
  MissingAccount;
  ProgramFailedToComplete;
  MaxInstructionTraceLengthExceeded;
  InvalidAccountData;
  ProgramFailedToCompile;
  ExecutableModified;
  InvalidAccountOwner;
  MaxSeedLengthExceeded;
  AccountAlreadyInitialized;
  AccountBorrowOutstanding;
  ReadonlyDataModified;
  UninitializedAccount;
  InvalidArgument;
  BorshIoError : text;
  BuiltinProgramsMustConsumeComputeUnits;
  MissingRequiredSignature;
  DuplicateAccountOutOfSync;
  MaxAccountsExceeded;
  ArithmeticOverflow;
  InvalidError;
  InvalidSeeds;
  DuplicateAccountIndex;
  ReadonlyLamportChange;
  InsufficientFunds;
};
type LoadedAddresses = record { writable : vec text; readonly : vec text };
type Result = variant { Ok; Err : TransactionError };
type Reward = record {
  lamports : int64;
  postBalance : nat64;
  commission : opt nat8;
  pubkey : text;
  rewardType : opt RewardType;
};
type RewardType = variant { fee; staking; rent; voting };
type RpcEndpoint = record { url : text; headers : opt vec HttpHeader };
type SolanaNetwork = variant { Mainnet; Custom : RpcEndpoint; Devnet };
type SolanaTransactionInfo = record {
  signature : text;
  block_time : opt nat64;
  transaction : opt EncodedConfirmedTransactionWithStatusMeta;
  slot : nat64;
};
type TokenAmount = record {
  decimals : nat8;
  uiAmount : opt float64;
  uiAmountString : text;
  amount : text;
};
type TransactionBinaryEncoding = variant { base58; base64 };
type TransactionError = variant {
  ProgramCacheHitMaxLimit;
  InvalidAccountForFee;
  AddressLookupTableNotFound;
  MissingSignatureForFee;
  WouldExceedAccountDataBlockLimit;
  AccountInUse;
  DuplicateInstruction : nat8;
  AccountNotFound;
  TooManyAccountLocks;
  InvalidAccountIndex;
  AlreadyProcessed;
  WouldExceedAccountDataTotalLimit;
  InvalidAddressLookupTableIndex;
  SanitizeFailure;
  ResanitizationNeeded;
  InvalidRentPayingAccount;
  MaxLoadedAccountsDataSizeExceeded;
  InvalidAddressLookupTableData;
  InvalidWritableAccount;
  WouldExceedMaxAccountCostLimit;
  InvalidLoadedAccountsDataSizeLimit;
  InvalidProgramForExecution;
  InstructionError : record { nat8; InstructionError };
  InsufficientFundsForRent : record { account_index : nat8 };
  UnsupportedVersion;
  ClusterMaintenance;
  WouldExceedMaxVoteCostLimit;
  SignatureFailure;
  ProgramAccountNotFound;
  AccountLoadedTwice;
  ProgramExecutionTemporarilyRestricted : record { account_index : nat8 };
  AccountBorrowOutstanding;
  WouldExceedMaxBlockCostLimit;
  InvalidAddressLookupTableOwner;
  InsufficientFundsForFee;
  CallChainTooDeep;
  UnbalancedTransaction;
  CommitCancelled;
  BlockhashNotFound;
};
type TransactionReturnData = record { data : text; programId : text };
type TransactionStatusMeta = record {
  fee : nat64;
  status : Result;
  preBalances : vec nat64;
  postTokenBalances : opt vec TransactionTokenBalance;
  innerInstructions : opt vec InnerInstructions;
  postBalances : vec nat64;
  loadedAddresses : opt LoadedAddresses;
  rewards : opt vec Reward;
  logMessages : opt vec text;
  returnData : opt TransactionReturnData;
  preTokenBalances : opt vec TransactionTokenBalance;
  computeUnitsConsumed : opt nat64;
  cost_units : opt nat64;
};
type TransactionTokenBalance = record {
  uiTokenAmount : TokenAmount;
  owner : opt text;
  accountIndex : nat8;
  mint : text;
  programId : opt text;
};
type TransactionVersion = variant { legacy; number : nat8 };
service : (InitArg) -> {
  associated_token_account : (opt principal, text) -> (text);
  create_associated_token_account : (opt principal, text) -> (text);
  create_nonce_account : (opt principal) -> (text);
  get_balance : (opt text) -> (nat);
  get_nonce : (opt text) -> (text);
  get_spl_token_balance : (opt text, text) -> (TokenAmount);
  get_transactions_by_address : (text, opt nat32) -> (
      vec SolanaTransactionInfo,
    );
  nonce_account : (opt principal) -> (text);
  send_sol : (opt principal, text, nat) -> (text);
  send_sol_with_durable_nonce : (opt principal, text, nat) -> (text);
  send_spl_token : (opt principal, text, text, nat) -> (text);
  solana_account : (opt principal) -> (text);
}
